#
# Copyright (c) 2005-2009 Nokia Corporation and/or its subsidiary(-ies).
# All rights reserved.
# This component and the accompanying materials are made available
# under the terms of the License "Eclipse Public License v1.0"
# which accompanies this distribution, and is available
# at the URL "http://www.eclipse.org/legal/epl-v10.html".
#
# Initial Contributors:
# Nokia Corporation - initial contribution.
#
# Contributors:
#
# Description:
#
# general tool settings, where it can find basic things it needs: 
# cdb.env.epocroot   = o:\\
# cdb.env.epoc32tree = ${cdb.env.epocroot}epoc32\\
cdb.env.cppfilt    = ${cdb.env.epoc32tree}gcc\\bin\\c++filt.exe
cdb.env.cppfilt.eabi = M:\\cdb\\cdb\\c++filt.exe
cdb.env.debug      = false

    
# Database Configuration
cdb.db.script =  M:\\cdb\\cdb\\cdb.sql
cdb.db.path   =  ${cdb.env.epoc32tree}data\\cdb.db
cdb.db.type   = HSQLDB

# Extraction Settings
cdb.extract.gxp.path = ${cdb.env.epoc32tree}release\\gccxml\\urel\\
cdb.extract.def.type = EABI
cdb.extract.classifier.plugins = M:\\cdb\\cdb\\plugins\\
cdb.extract.classifier.descriptor = symbianclassifier
cdb.extract.classifier.init = ${cdb.env.epoc32tree}data\\apiclassdoc.xml
cdb.extract.classifier.failonpluginerror = false
# if not set, extracted data is not classified. 

# Log File Settings
cdb.log.file.enabled = false
cdb.log.file.format  = %-5p [%-20.20C{1}] %-8r %4L - %m%n
cdb.log.file.path    = M:\\cdb\\cdb\\cdb.log
cdb.log.file.level   = INFO

# Console Log Settings
cdb.log.console.format = %p\t%m%n
cdb.log.console.level  = INFO

# Report Settings
cdb.report.stylesheet =  M:\\cdb\\cdb\\bcstyle.xsl
cdb.report.comparepluginid = false
cdb.report.classificationtightening = true
# cdb.report.apiclass.filter.status
# cdb.report.apiclass.filter.access

#comparisons on or off
cdb.newcompare.enable = true

#support for absent keyword in DEFs
cdb.support.absentdef = true

# List of rules to classify breaks by severity
#
# For each break type, say if it's high or low and 
# an optional regular expression that will be matched 
# against an optional break field that depends on the 
# type of the break, i.e. for a constValueChanged it
# would be the name of the variable.
#
#
# break name, high|low, ["regexp"]
# List of rules to classify breaks by severity
#
# For each break type, say if it's high or low and 
# an optional regular expression that will be matched 
# against an optional break field that depends on the 
# type of the break, i.e. for a constValueChanged it
# would be the name of the variable.
#
#
# break name, high|low, ["regexp"]
cdb.report.priorityrules = constValueChanged, low, "K\\w+BuildVersionNumber" ;\
            exeDefFileChanged, low ;\
            classificationSlightlyTightened, low ;\
            classificationBroken, low ;\
            exeMMPFileChanged, low ;\
            defFileNameOrPathChanged, low ;\
            enumItemValueChanged, low, "EBuildVersionNumber" ;\
            enumItemValueChanged, low, "ENumHalAttributes" ;\
            enumItemValueChanged, low, "EPwLimit" ; 
            
cdb.report.prioritymethods = constValueChanged, file ; \
                             enumItemValueChanged, expected ; \
                             anonymousEnumBreak, expected;
                             
